# Custom prompt with git support.
# Git support functions for Evil Tomato
# Mohit Cheppudira <mohit@muthanna.com>

# Note: The Git support functions have been moved to /lib/evilgit.sh in:
#
#   http://github.com/0xfe/evil/raw/master/lib/evilgit.sh

# Returns "*" if the current git branch is dirty.
function evil_git_dirty {
  [[ $(git diff --shortstat 2>/dev/null | tail -n1) != "" ]] && echo " (DIRTY)"
}

# Returns the number of untracked files.
function evil_git_num_untracked_files {
  expr `git status --porcelain 2>/dev/null| grep "^??" | wc -l`
}

# Returns the number of dirty files.
function evil_git_num_dirty_files {
  expr `git status --porcelain 2>/dev/null | egrep "^(M| M)" | wc -l`
}

# Returns "|stashed:N" where N is the number of stashed states (if any).
function evil_git_stash {
  local stash=`expr $(git stash list 2>/dev/null| wc -l)`
  if [ "$stash" != "0" ]
  then
    echo " stashed:$stash"
  fi
}

# Returns "|unmerged:N" where N is the number of unmerged local and remote branches (if any).
function evil_git_unmerged {
  local unmerged=`expr $(git branch --no-color -a --no-merged | grep -v HEAD | wc -l)`
  if [ "$unmerged" != "0" ]
  then
    echo " unmerged:$unmerged"
  fi
}

# Returns "|unpushed:N" where N is the number of unpushed local and remote branches (if any).
function evil_git_unpushed {
  local unpushed=`expr $( (git branch --no-color -r --contains HEAD; \
    git branch --no-color -r) | grep -v HEAD | sort | uniq -u | wc -l )`
  if [ "$unpushed" != "0" ]
  then
    echo " unpushed:$unpushed"
  fi
}

# Get the current git branch name (if available)
evil_git_prompt() {
  # local ref=$(git symbolic-ref HEAD 2>/dev/null | cut -d'/' -f3)
  local ref=$(git branch 2>/dev/null | grep '^\*' | cut -b 3- | sed 's/[\(\)]//g')

  if [ "$ref" != "" ]
  then
    echo "
  Git: $ref$(evil_git_dirty)$(evil_git_stash)"
  fi
}

#########################################################################################################################
#########################################################################################################################
#########################################################################################################################

# Returns 0 (success) if the pwd is tracked, otherwise 1 (failure).
git_pwd_is_tracked() {
   [ $(git log -1 --pretty=oneline . 2> /dev/null | wc -l) -eq "1" ]
}

# Emits the current time in 24-hr notation.
show_time() {
  echo "${COLOR_GRAY}$(date +%H:%M)${COLOR_NONE}"
}

# Stores the exit status of the last command for use by show_exit_status function.
if [[ ! $PROMPT_COMMAND =~ store_exit_status ]]; then
  export PROMPT_COMMAND="store_exit_status && ${PROMPT_COMMAND:-:}"
fi
store_exit_status() {
  LAST_EXIT_STATUS=$?
}

# Emits exit status of last command if error condition returned.
show_exit_status() {
  if [ "x${LAST_EXIT_STATUS}" != "x0" ]; then
    echo " [${COLOR_RED}${LAST_EXIT_STATUS}${COLOR_NONE}]"
  fi
}

# Emits the current git branch and marker if there are outstanding changes.
show_git_branch_and_status() {
  if git_pwd_is_tracked; then
    local branch_prompt
    branch_prompt=$(__git_ps1 " (${COLOR_YELLOW}%s${COLOR_NONE})")
    if [[ -n "$branch_prompt" ]]; then
      echo "$branch_prompt $(show_git_status)"
    fi
  fi
}

# Removes display of git status from prompt, useful for large repositories.
hide_git_status() {
  show_git_branch_and_status() { exit; }
}

# Emits a red âœ— if current repository is 'dirty'.
show_git_status() {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "${COLOR_RED}*${COLOR_NONE}"
}

#########################################################################################################################
#########################################################################################################################
#########################################################################################################################

[ -n "$PS1" ] && bind "set completion-ignore-case on"

export RSYNC_RSH="ssh"
alias rsync='rsync -v --progress --partial'

alias less="less -R"

export GREP_OPTIONS='--color=auto'
export GREP_COLOR='1;32'

export PS1="${COLOR_RED}\!${COLOR_NONE} "'$(show_time)'" ${COLOR_GREEN}\u${COLOR_NONE}:${COLOR_CYAN}\w${COLOR_NONE}"'$(show_git_branch_and_status)'"\n\$ "